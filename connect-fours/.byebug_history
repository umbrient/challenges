c
type
4
c
type
5
c
type
4
c
type
c
type
c
type
c
type
found
c
type
found
c
type
found
c
type
found
c
type
found
foun
exit
type
found
exit
@winner_coords
c
cc
c
cc
c
cc
c
@board.length
c
cc
c
exit
a
y
exit
@winner_coords.include?([row_index, col_index])
@winner_coords
col_index
row_index
(s)
c
(s)
c
(s)
c
col_index
row_index
@winner_coords
(s)
exit
exigt
(n)
(s)
@board[n].index(s)
(s)
exit
c
(s)
c
@board[n].index(s)
s.object_id
c
s.object_id
@board[n].index(s)
@board.index(s)
(s)
(n)
@winner_coords
exit
@winner_coords
@winner_coords << [0,0]
@winner_coords
row
@winner_coords << [row, n]
[row, n]
@winner_coords
n
counter
n
counter
n
@board[row][n] == get_coin
@board[row][n]
(n)
row
c
get_coin
c
cc
c
cc
c
c
[200~@winner_coords << [row, n]
(n)
n
row
n
counter
n
get_coin
@board[row][n]
(n)
row
c
row
c
row
(n)
c
n
(n)
row
c
(n)
c
n
row
c
row
c
row
c
row
c
n
c
(n)
c
n
counter
n
counter
exit
vertical_match?
type
get_coin
c
horizonal_match?
#{type}_match?
"#{type}_match?"
send("#{type}_match?" 
(send("#{type}_match?") rescue false) 
type
c
type
c
get_coin
get_coint
vertical
c
type
c
n
(send("#{type}_match?") rescue false) 
type
n
type
n
(send("#{type}_match?") rescue false) 
type
n
(send("#{type}_match?") rescue false) 
send(type + "_match?")
type
0
1
exit
c
exit
vertical_match?
veritcal_match?
matches
show_board
c
matches
n
c
ex
e
c
ex
exit
row
@board[row]
@board[row][n]
row[0]
row
(n)
n
row
@board[0]
@board
row
exit
show_boardexit
show_board
row[column] = get_coin
row[column]
show_board
c
row
column
row[column]
show_board
@board
n
row[column] == @default_char
row[column]
exit
@default_charexit
@default_char
@board = [[@default_char]*7]*6
exit
@board = [[@default_char]*7]*6
@default_char = "-"
@default_char
@default_chatr
@board
@board = [[@default_char]*7]*6
c
n
input
